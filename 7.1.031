To: vim-dev@vim.org
Subject: patch 7.1.031
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
------------

Patch 7.1.031
Problem:    virtcol([123, '$']) doesn't work. (Michael Schaap)
Solution:   When '$' is used for the column number get the last column.
Files:	    runtime/doc/eval.txt, src/eval.c


*** ../vim-7.1.030/runtime/doc/eval.txt	Tue Jun 19 17:23:46 2007
--- runtime/doc/eval.txt	Wed Jul 11 21:21:28 2007
***************
*** 1,4 ****
! *eval.txt*      For Vim version 7.1.  Last change: 2007 Jun 09
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
--- 1,4 ----
! *eval.txt*      For Vim version 7.1.  Last change: 2007 Jul 11
  
  
  		  VIM REFERENCE MANUAL    by Bram Moolenaar
***************
*** 2020,2025 ****
--- 2020,2029 ----
  			    number of characters in the cursor line plus one)
  		    'x	    position of mark x (if the mark is not set, 0 is
  			    returned)
+ 		Additionally {expr} can be [lnum, col]: a |List| with the line
+ 		and column number. Most useful when the column is "$", to get
+ 		the las column of a specific line.  When "lnum" or "col" is
+ 		out of range then col() returns zero.
  		To get the line number use |line()|.  To get both use
  		|getpos()|.
  		For the screen column position use |virtcol()|.
***************
*** 5024,5037 ****
  		position, the returned Number will be the column at the end of
  		the <Tab>.  For example, for a <Tab> in column 1, with 'ts'
  		set to 8, it returns 8.
! 		For the use of {expr} see |col()|.  Additionally you can use
! 		[lnum, col]: a |List| with the line and column number.  When
! 		"lnum" or "col" is out of range then virtcol() returns zero.
! 		When 'virtualedit' is used it can be [lnum, col, off], where
  		"off" is the offset in screen columns from the start of the
  		character.  E.g., a position within a <Tab> or after the last
  		character.
- 		For the byte position use |col()|.
  		When Virtual editing is active in the current mode, a position
  		beyond the end of the line can be returned. |'virtualedit'|
  		The accepted positions are:
--- 5029,5040 ----
  		position, the returned Number will be the column at the end of
  		the <Tab>.  For example, for a <Tab> in column 1, with 'ts'
  		set to 8, it returns 8.
! 		For the byte position use |col()|.
! 		For the use of {expr} see |col()|.
! 		When 'virtualedit' is used {expr} can be [lnum, col, off], where
  		"off" is the offset in screen columns from the start of the
  		character.  E.g., a position within a <Tab> or after the last
  		character.
  		When Virtual editing is active in the current mode, a position
  		beyond the end of the line can be returned. |'virtualedit'|
  		The accepted positions are:
*** ../vim-7.1.030/src/eval.c	Tue Jul 10 13:27:46 2007
--- src/eval.c	Wed Jul 11 19:50:27 2007
***************
*** 672,678 ****
  static void f_writefile __ARGS((typval_T *argvars, typval_T *rettv));
  
  static int list2fpos __ARGS((typval_T *arg, pos_T *posp, int *fnump));
! static pos_T *var2fpos __ARGS((typval_T *varp, int lnum, int *fnum));
  static int get_env_len __ARGS((char_u **arg));
  static int get_id_len __ARGS((char_u **arg));
  static int get_name_len __ARGS((char_u **arg, char_u **alias, int evaluate, int verbose));
--- 672,678 ----
  static void f_writefile __ARGS((typval_T *argvars, typval_T *rettv));
  
  static int list2fpos __ARGS((typval_T *arg, pos_T *posp, int *fnump));
! static pos_T *var2fpos __ARGS((typval_T *varp, int dollar_lnum, int *fnum));
  static int get_env_len __ARGS((char_u **arg));
  static int get_id_len __ARGS((char_u **arg));
  static int get_name_len __ARGS((char_u **arg, char_u **alias, int evaluate, int verbose));
***************
*** 16505,16513 ****
   * Returns NULL when there is an error.
   */
      static pos_T *
! var2fpos(varp, lnum, fnum)
      typval_T	*varp;
!     int		lnum;		/* TRUE when $ is last line */
      int		*fnum;		/* set to fnum for '0, 'A, etc. */
  {
      char_u		*name;
--- 16508,16516 ----
   * Returns NULL when there is an error.
   */
      static pos_T *
! var2fpos(varp, dollar_lnum, fnum)
      typval_T	*varp;
!     int		dollar_lnum;	/* TRUE when $ is last line */
      int		*fnum;		/* set to fnum for '0, 'A, etc. */
  {
      char_u		*name;
***************
*** 16520,16525 ****
--- 16523,16529 ----
  	list_T		*l;
  	int		len;
  	int		error = FALSE;
+ 	listitem_T	*li;
  
  	l = varp->vval.v_list;
  	if (l == NULL)
***************
*** 16535,16540 ****
--- 16539,16552 ----
  	if (error)
  	    return NULL;
  	len = (long)STRLEN(ml_get(pos.lnum));
+ 
+ 	/* We accept "$" for the column number: last column. */
+ 	li = list_find(l, 1L);
+ 	if (li != NULL && li->li_tv.v_type == VAR_STRING
+ 		&& li->li_tv.vval.v_string != NULL
+ 		&& STRCMP(li->li_tv.vval.v_string, "$") == 0)
+ 	    pos.col = len + 1;
+ 
  	/* Accept a position up to the NUL after the line. */
  	if (pos.col == 0 || (int)pos.col > len + 1)
  	    return NULL;	/* invalid column number */
***************
*** 16567,16573 ****
      pos.coladd = 0;
  #endif
  
!     if (name[0] == 'w' && lnum)
      {
  	pos.col = 0;
  	if (name[1] == '0')		/* "w0": first visible line */
--- 16579,16585 ----
      pos.coladd = 0;
  #endif
  
!     if (name[0] == 'w' && dollar_lnum)
      {
  	pos.col = 0;
  	if (name[1] == '0')		/* "w0": first visible line */
***************
*** 16585,16591 ****
      }
      else if (name[0] == '$')		/* last column or line */
      {
! 	if (lnum)
  	{
  	    pos.lnum = curbuf->b_ml.ml_line_count;
  	    pos.col = 0;
--- 16597,16603 ----
      }
      else if (name[0] == '$')		/* last column or line */
      {
! 	if (dollar_lnum)
  	{
  	    pos.lnum = curbuf->b_ml.ml_line_count;
  	    pos.col = 0;
*** ../vim-7.1.030/src/version.c	Tue Jul 17 14:32:07 2007
--- src/version.c	Tue Jul 17 16:24:54 2007
***************
*** 668,669 ****
--- 668,671 ----
  {   /* Add new patch number below this line */
+ /**/
+     31,
  /**/

-- 
CRONE:  Who sent you?
ARTHUR: The Knights Who Say GNU!
CRONE:  Aaaagh!  (she looks around in rear) No!  We have no licenses here.
           "Monty Python and the Holy editor wars" PYTHON (MONTY) SOFTWARE LTD

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\        download, build and distribute -- http://www.A-A-P.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
